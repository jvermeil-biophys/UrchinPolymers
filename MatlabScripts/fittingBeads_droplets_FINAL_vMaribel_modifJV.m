%% Define function
function [tracks, metadata] = importTrackMateTracks(file, clipz, scalet)
%%IMPORTTRACKMATETRACKS Import linear tracks from TrackMate
%
% This function reads a XML file that contains linear tracks generated by
% TrackMate (http://fiji.sc/TrackMate). Careful: it does not open the XML
% TrackMate session file, but the track file exported in TrackMate using
% the action 'Export tracks to XML file'. This file format contains less
% information than the whole session file, but is enough for linear tracks
% (tracks that do not branch nor fuse).
%
% SYNTAX
%
% tracks = IMPORTTRACKMATETRACKS(file) opens the track file 'file' and
% returns the tracks in the variable 'tracks'. 'tracks' is a cell array,
% one cell per track. Each cell is made of 4xN double array, where N is the
% number of spots in the track. The double array is organized as follow: 
% [ Ti, Xi, Yi, Zi ; ...] where T is the index of the frame the spot has been
% detected in. T is always an integer. X, Y, Z are the spot spatial 
% coordinates in physical units.
%
% [tracks, metadata] = IMPORTTRACKMATETRACKS(file) also returns 'metadata',
% a struct that contains the metadata that could be retrieved from the XML
% file. It is made of the following fields:
%   - 'spaceUnits': a string containing the name of the physical spatial unit.
%   - 'timeUnits': a string containing the name of the physical temporal unit.
%   - 'frameInterval': a double whose value is the frame interval.
%   - 'date': a string representation of the date the XML file has been generated.
%   - 'source': a string representation of the TrackMate version this file
%     has been generated with.
%
% OUTPUT
%
% The function offers two flags to change how the output is returned. As
% stated above, by default, it is returned as [ Ti, Xi, Yi, Zi ; ...] where
% T is the frame as an integer.
%
%  tracks = IMPORTTRACKMATETRACKS(file, clipZ) allows specifying whether to
%  remove the Z coordinate entirely or not. TrackMate always return 3D
%  coordinates, even for 2D motion. In the latter case, the Z coordinate is
%  always 0. If 'clipZ' is set to true AND if all the particles have their
%  Z coordinate to 0, then 'tracks' will be made of [ Ti, Xi, Yi ] arrays.
%
%  tracks = IMPORTTRACKMATETRACKS(file, clipZ, scaleT) allows specifying
%  whether to scale the T coordinate by physical units. If scaleT is set to
%  true AND if the frame interval metadata value could be retrieved, then
%  the time will be returned in physical units, not in integer frame
%  number.
%
%
% FILE FORMAT
% 
% The XML file is expected to be formatted as follow:
% 
% <?xml version="1.0" encoding="UTF-8"?>
% <Tracks nTracks="39" spaceUnits="pixel" frameInterval="5.0" timeUnits="s" generationDateTime="Thu, 8 Aug 2013 13:33:23" from="TrackMate v2.1.0">
%   <particle nSpots="125">
%       <detection t="0" x="69.3" y="151.0" z="0.0" />
%       <detection t="1" x="70.0" y="153.0" z="0.0" />
%           ... etc...
%   </particle>
%   <particle nSpots="99">
%       ...
%   </particle>
%   ...
% </Tracks>
%
%
% Jean-Yves Tinevez <jeanyves.tinevez@gmail.com> - 2013

    % Input 
    
    if nargin < 2
        clipz = false;
    end
    
    if nargin < 3
        scalet = false;
    end


    % Load and Test compliance

    doc = xmlread(file);
    
    root = doc.getDocumentElement;
    
    if ~strcmp(root.getTagName, 'Tracks')
        error('MATLAB:importTrackMateTracks:BadXMLFile', ...
            'File does not seem to be a proper track file.')
    end
    
    % Get metadata
    metadata.spaceUnits     = char( root.getAttribute('spaceUnits') );
    metadata.timeUnits      = char( root.getAttribute('timeUnits') );
    metadata.frameInterval  = str2double( root.getAttribute('frameInterval') );
    metadata.date           = char( root.getAttribute('generationDateTime') );
    metadata.source         = char( root.getAttribute('from') );
    
    
    % Parse 
    
    nTracks = str2double( root.getAttribute('nTracks') );
    tracks = cell(nTracks, 1);
    trackNodes = root.getElementsByTagName('particle');
    
    for i = 1 : nTracks
       
        trackNode = trackNodes.item(i-1);
        nSpots = str2double( trackNode.getAttribute('nSpots') );
        A = NaN( nSpots, 4); % T, X, Y, Z
        
        detectionNodes = trackNode.getElementsByTagName('detection');
        
        for j = 1 : nSpots
            
            detectionNode = detectionNodes.item(j-1);
            t = str2double(detectionNode.getAttribute('t'));
            x = str2double(detectionNode.getAttribute('x'));
            y = str2double(detectionNode.getAttribute('y'));
            z = str2double(detectionNode.getAttribute('z'));
            A(j, :) = [ t x y z ];
            
        end
        
        tracks{i} = A;
        
    end
    
    % Clip Z dimension if possible and asked
    
    if clipz
        
        if all(cellfun(@(X) all( X(:,4) == 0), tracks))
            % Remove the z coordinates since it is 0 everywhere
            for i = 1 : nTracks
                tracks{i} = tracks{i}(:, 1:3);
            end
        end
        
    end
    
    % Scale time using physical units if required
    
    if scalet
        if ~isnan(metadata.frameInterval) && metadata.frameInterval > 0
            
            % Scale time so that it is in physical units
            for i = 1 : nTracks
                tracks{i}(:, 1) = tracks{i}(:, 1) * metadata.frameInterval;
            end
            
        end
        
    end
    
end


%% Fitting Jeffrey's Model to Single Bead Pulling Data Using fminsearch Optimization Method
%%
clearvars;
close all;
%clc;
%% Setting the Parameters 

pixel_size = 0.451;                                                        %um
time_stp = 0.5;                                                            %second


v = @(x) 80.23*exp(-x/47.49)+1.03*exp(-x/22740.0);                         %magnet calibration function um/s
viscosity_glycerol = 0.0857;                                               %80% glycerol in Pa.s
v_interp = v(200);                                                         %speed at 200 mu as um/s
force_coeff = 0.3663;                                                      %aggregate force coefficient (c) in f=cR^3

start1 = [2, 10, 100];                                                  %starting values of k gamma1 gamma2
start2 = [0.9 25];                                                         %starting values of a and tau

%% TEST 1
directory = 'C:\Users\Utilisateur\Desktop\MicroscopeData\Analysis_Pulls\Tracks\25-09-19';
name = '25-09-19_M2_D6_P1_B2_UV20m100p_Gly75p_NaSS5p_I2959-50mM_1-1_Tracks.xml';         %name of trajectory file
output_name = 'output_25-09-19_M2_D6_P1_B2';                                     %name of output file
output_folder = 'C:\Users\Utilisateur\Desktop\MicroscopeData\Analysis_Pulls';    %name of output folder
cd(directory);


initPullFrame = 61;                                                %%% Previous frame to the magnet appear FROM FIJI MOVIE
finPullFrame = 121;                                                          %%% Final POSITION OF MAGNET FROM FIJI MOVIE
x_magnet = 153.195;                                                            %x magnet tip center in pixel                                                      
y_magnet = 241.486;                                                        %y magnet tip center in pixel

magnet_radius = 242*pixel_size/2;                                                        %um
bead_radius = 55*pixel_size/2;                                                         %um

%% TEST 2
directory = 'C:\Users\Utilisateur\Desktop\MicroscopeData\Analysis_Pulls\Tracks\25-09-19';
name = '25-09-19_M1_D9_P1_B2_noUV_Gly75p_NaSS5p_I2959-50mM_1-1_Tracks.xml';         %name of trajectory file
output_name = 'output_25-09-19_M1_D9_P1_B2';                                     %name of output file
output_folder = 'C:\Users\Utilisateur\Desktop\MicroscopeData\Analysis_Pulls';    %name of output folder
cd(directory);


initPullFrame = 9;                                                %%% Previous frame to the magnet appear FROM FIJI MOVIE
finPullFrame = 93;                                                          %%% Final POSITION OF MAGNET FROM FIJI MOVIE
x_magnet = 154.009;                                                            %x magnet tip center in pixel                                                      
y_magnet = 412.503;                                                        %y magnet tip center in pixel
	
magnet_radius = 227*pixel_size/2;                                                        %um
bead_radius = 45*pixel_size/2;                                                         %um

%% TEST 3
directory = 'C:\Users\Utilisateur\Desktop\MicroscopeData\Analysis_Pulls\Tracks\25-09-04';
name = '25-09-04_M1-D7-P5_Tracks.xml';         %name of trajectory file
output_name = 'output_25-09-04_M1-D7-P5';                                     %name of output file
output_folder = 'C:\Users\Utilisateur\Desktop\MicroscopeData\Analysis_Pulls';    %name of output folder
cd(directory);


initPullFrame = 19;                                                %%% Previous frame to the magnet appear FROM FIJI MOVIE
finPullFrame = 29;                                                          %%% Final POSITION OF MAGNET FROM FIJI MOVIE
x_magnet = 186.211;                                                            %x magnet tip center in pixel                                                      
y_magnet = 992.370;                                                        %y magnet tip center in pixel
	
	
magnet_radius = 223*pixel_size/2;                                                        %um
bead_radius = 33*pixel_size/2;                                                         %um




%% Loading and Selection of Trajectories
[tracks, md] = importTrackMateTracks([directory,'\',name]);
% [track_id, f1] = trackSelection(tracks);
% selected_track = tracks{track_id,1};  
selected_track = tracks{1,1};  

X = selected_track(:,2);
Y = selected_track(:,3);
t = selected_track(:,1);

initPullTime=find(t==(initPullFrame-1));    %% THIS IS AN INDEX NOT THE VALUE OF THE CELL
finPullTime= find(t==(finPullFrame-1));     %% THIS IS AN INDEX NOT THE VALUE OF THE CELL


%% Preliminary Trajectory Check
if  selected_track(end,1)<finPullTime+3
    msg_box = msgbox({'Selected track starts after pulling!',...
        'Not enough points to fit relaxation curve!'}, 'Error', 'error');
    return
end

%% Rotating Selected Track and Visual Check

DY = Y(initPullTime)-Y(finPullTime);
DX = X(initPullTime)-X(finPullTime);

theta = atan2(DY, DX);

%%

rotation_mat = [cos(-theta) -sin(-theta);sin(-theta) cos(-theta)];

%%

x_rot = X*rotation_mat(1,1) + Y*rotation_mat(1,2);
y_rot = X*rotation_mat(2,1) + Y*rotation_mat(2,2);

pull_index = (initPullTime:finPullTime);       


xp = x_rot(pull_index);
yp = y_rot(pull_index);

f2 = figure(2);
subplot(1,2,1)
plot(X,Y,'.-','linewidth',1);
title('original track'); axis equal;
set(gca, 'ydir', 'reverse');
subplot(1,2,2)
plot(x_rot,y_rot,'.-','linewidth',1);
title('rotated track'); axis equal; hold all;
p = plot(xp, yp,'k.-','linewidth',2);
legend(p, 'pulled segment');

%% Pulling Phase - Newtonian fluid
d = [];
d(:,1) = (x_magnet-X(pull_index))*pixel_size;
d(:,2) = (y_magnet-Y(pull_index))*pixel_size;
dist = sqrt(d(:,1).^2+d(:,2).^2)-magnet_radius;                            %bead distance to magnet surface

%pull_force = 6*pi*viscosity_glycerol*v(dist)*bead_radius;                  %magnetic pulling force in pN
pull_force = force_coeff*(bead_radius^3)*v(dist)/v_interp;  %pN
pull_force = pull_force * 1e-12; % pN -> N

x_shift = (-x_rot(initPullTime:end)+max(x_rot(initPullTime:end)))*pixel_size;   %flipped and shifted x coordinate

pull_length = (finPullTime) - (initPullTime) + 1;
dx.pulling = x_shift(pull_index-initPullTime+1);                  %%%%%% ADD +1 TO START AT THE FIRST PULLING POSITION
dx.pulling = dx.pulling * 1e-6; % µm -> m
dx.pulling_n = dx.pulling./pull_force;                                     %scaled displacement 
tpulling = (t(pull_index)-t(initPullTime))'*time_stp;      % sec
tpulling=tpulling';

c = polyfit(tpulling, dx.pulling_n, 1);

gamma = c(1);
eta = (1/(6*pi*bead_radius*1e-6)) * (1/gamma); % Pa.s

% % Fitting Jeffrey's model to the pulling phase
% jeffery_model = @(k, gamma1, gamma2, x) (1-exp(-k*x/gamma1))/k + x/gamma2;
% 
% g1 = @(start1) norm(jeffery_model(start1(1), start1(2), start1(3), tpulling)-dx.pulling_n);
% 
% options = optimset('TolX', 1e-10, 'TolFun', 1e-10, 'MaxFunEvals',500);
% fit1 = fminsearch(g1, start1, options);
% 
% k = fit1(1);
% gamma1 = fit1(2);
% gamma2 = fit1(3);
% 
% f3 = figure(3);
% subplot(1, 2, 1);
% plot(tpulling, dx.pulling_n, 's');
% hold all; axis square;
% time = linspace(0,tpulling(end),1000);
% y1 = jeffery_model(k, gamma1, gamma2, time);
% plot(time, y1, 'linewidth', 1.5,'color', 'r');
% xlabel('t [s]');
% ylabel('dx/f [\mum/pN]');
% 
% pulling.force = [tpulling dx.pulling pull_force];
% pulling.curves = [tpulling dx.pulling_n];
% %pulling.fitting = [k, gamma1, gamma2];
% tempo1=gamma1/k; 
% tempo2=gamma2/k;
% pulling.fitting = [k, gamma1, gamma2, tempo1, tempo2];


%% Pulling Phase
d = [];
d(:,1) = (x_magnet-X(pull_index))*pixel_size;
d(:,2) = (y_magnet-Y(pull_index))*pixel_size;
dist = sqrt(d(:,1).^2+d(:,2).^2)-magnet_radius;                            %bead distance to magnet surface

%pull_force = 6*pi*viscosity_glycerol*v(dist)*bead_radius;                  %magnetic pulling force in pN
pull_force = force_coeff*(bead_radius^3)*v(dist)/v_interp;  %pN

x_shift = (-x_rot(initPullTime:end)+max(x_rot(initPullTime:end)))*pixel_size;   %flipped and shifted x coordinate

pull_length = (finPullTime) - (initPullTime) + 1;
dx.pulling = x_shift(pull_index-initPullTime+1);                  %%%%%% ADD +1 TO START AT THE FIRST PULLING POSITION
dx.pulling_n = dx.pulling./pull_force;                                     %scaled displacement 
tpulling = (t(pull_index)-t(initPullTime))'*time_stp;     
tpulling=tpulling';


% Fitting Jeffrey's model to the pulling phase
jeffery_model = @(k, gamma1, gamma2, x) (1-exp(-k*x/gamma1))/k + x/gamma2;

g1 = @(start1) norm(jeffery_model(start1(1), start1(2), start1(3), tpulling)-dx.pulling_n);

options = optimset('TolX', 1e-10, 'TolFun', 1e-10, 'MaxFunEvals',500);
fit1 = fminsearch(g1, start1, options);

k = fit1(1);
gamma1 = fit1(2);
gamma2 = fit1(3);

f3 = figure(3);
subplot(1, 2, 1);
plot(tpulling, dx.pulling_n, 's');
hold all; axis square;
time = linspace(0,tpulling(end),1000);
y1 = jeffery_model(k, gamma1, gamma2, time);
plot(time, y1, 'linewidth', 1.5,'color', 'r');
xlabel('t [s]');
ylabel('dx/f [\mum/pN]');

pulling.force = [tpulling dx.pulling pull_force];
pulling.curves = [tpulling dx.pulling_n];
%pulling.fitting = [k, gamma1, gamma2];
tempo1=gamma1/k; 
tempo2=gamma2/k;
pulling.fitting = [k, gamma1, gamma2, tempo1, tempo2];


%% Release Phase
% Fitting exponential model with an offset to the release curve
exp_fit = @(a, tau, x) (1-a)*exp(-x/tau)+a;

dx.release_n = x_shift((pull_length):end)/x_shift(pull_length);          %normalized release displacement

vx_release = diff(x_rot((finPullTime):end));        %% THIS IS NOT SPEED, IT IS DISPLACEMENT OF X_ROTATED IN THE RELEASING PHASE
vy_release = diff(y_rot((finPullTime):end));        %% THIS IS NOT SPEED, IT IS DISPLACEMENT OF Y_ROTATED IN THE RELEASING PHASE
alpha = atan2(vy_release,vx_release);                                      %angle between two succesive steps
%correlation = cos(diff(alpha));
%ind = find(correlation<0.1)+1;                                             %last relaxation step when particle moves backward

%dx.release_n = dx.release_n(1:ind);
%t.release = (0:ind-1)'*time_stp;

Finalindex=length(t);
Release_index = ((finPullTime):Finalindex);     %% THIS IS THE LENGTH OF THE RELEASING PHASE AND IS BASED ON FRAME SHAPE (not time, ie, starts in 1)
trelease = (t(Release_index)-t(finPullTime))'*time_stp;   %% RELEASING TIMES
trelease=trelease';

g2 = @(start2) norm(exp_fit(start2(1), start2(2), trelease)-dx.release_n);

options = optimset('TolX', 1e-7, 'TolFun', 1e-7, 'MaxFunEvals',1000);
fit2 = fminsearch(g2, start2, options);

a = fit2(1);
tau = fit2(2);

subplot(1, 2, 2);
plot(trelease, dx.release_n, 's');
hold all; axis square;
time = linspace(0,trelease(end),1000);
y2 = exp_fit(a, tau, time);
plot(time, y2, 'linewidth', 1.5,'color', 'r');
ylim([0 1.0]);
xlabel('t [s]');
ylabel('Normalized displacement');

release.curves = [trelease dx.release_n];
release.fitting = [a, tau];


%% Saving Results in Excel
mkdir(output_folder);
cd([directory, '/', output_folder]);

%first sheet for the puling phase
headers.pulling1 = {'t[s]', 'dx.pulling', 'Pulling Force [pN]'};
xlswrite(output_name, headers.pulling1, 1, 'B2');
xlswrite(output_name, pulling.force, 1, 'B3');

%second sheet for the pulling phase
headers.pulling = {'t[s]', 'dx/f[um/pN]', 'k[pN/um]','gamma1[pN.s/um]', 'gamma2[pN.s/um]', 'tempo1[s]', 'tempo2[s]'};
xlswrite(output_name, headers.pulling, 2, 'B2');
xlswrite(output_name, pulling.curves, 2, 'B3');
xlswrite(output_name, pulling.fitting, 2, 'D3');

%third sheet for the release phase
headers.release = {'t[s]', 'dx/dx(0)', 'a','tau[s]'};
xlswrite(output_name, headers.release, 3, 'B2');
xlswrite(output_name, release.curves, 3, 'B3');
xlswrite(output_name, release.fitting, 3, 'D3');


%% Saving Workplace and Figures
save([output_name, '.mat']);
saveas(f1,'selected_track.jpg');
saveas(f2,'trajectories.jpg');
saveas(f3,'fits.jpg');

%% Print in screen to copy
disp([num2str(k), ' ', num2str(gamma1), ' ', num2str(gamma2), ' ', num2str(a), ' ', num2str(tau)]);